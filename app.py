from recognition import E2E
import cv2
from pathlib import Path
import argparse
import time
from flask import Flask, url_for, request, jsonify
import base64
import numpy as np
import json
app = Flask(__name__)
def get_arguments():
    arg = argparse.ArgumentParser()
    arg.add_argument('-i', '--image_path', help='link to image', default='./images/40.jpg')

    return arg.parse_args()

@app.route('/')
def index():
    return 'hi';

@app.route('/hello', methods=['GET'])
def hello():
    # data = request.json;

    req_data = request.get_json()
    userid= req_data['userid']
    print('data is')
    print(req_data)
    print(userid)
    # print(req_data['userid'])
    print('end data')
    return 'hello';

@app.route('/find-lp/<imgStr>')
def findLPwithImg(imgStr):
    image = ""  # raw data with base64 encoding
    # image = imgStr.replace('-','/')
    # print(image2)

    decoded_data = base64.b64decode(image)
    np_data = np.fromstring(decoded_data, np.uint8)
    img2 = cv2.imdecode(np_data, cv2.IMREAD_UNCHANGED)
    #Khuc nay decode base 64
    # print(img2)
    # cv2.imshow("test", img2)
    # if cv2.waitKey(0) & 0xFF == ord('q'):
    #     exit(0)


    args = get_arguments()

    img_path = Path(args.image_path)

    # read image
    img = cv2.imread(str(img_path))

    # start
    start = time.time()

    # load model
    model = E2E()

    # recognize license plate
    image = model.predict(img2)
    # print("License Plate Text: " + image)

    # end
    end = time.time()

    print('Model process on %.2f s' % (end - start))
    return json.dumps(
        {
            "firstLine":image['first_line'],
            "secondLine": image["second_line"],
            "timeResponse": end-start,
        }
    );

@app.route('/findlp')
def findLPwithImg2():
    req_data = request.get_json()
    imageStr = req_data['license-img']

    image = imageStr[23:]
    decoded_data = base64.b64decode(image)
    np_data = np.fromstring(decoded_data, np.uint8)
    img = cv2.imdecode(np_data, cv2.IMREAD_UNCHANGED)
    scale_percent = 40
    width = int(img.shape[1] * scale_percent / 100)
    height = int(img.shape[0] * scale_percent / 100)
    dsize = (width, height)
    img = cv2.resize(img, dsize)

    # start
    start = time.time()

    # load model
    model = E2E()

    # recognize license plate
    image = model.predict(img)
    # print("License Plate Text: " + image)

    # end
    end = time.time()

    print('Model process on %.2f s' % (end - start))
    return json.dumps(
        {
            "firstLine":image['first_line'],
            "secondLine": image["second_line"],
            "timeResponse": end-start,
        }
    );

if __name__ == '__main__':
    app.run()


# show image
# cv2.imshow('License Plate', image)



# cv2.destroyAllWindows()
